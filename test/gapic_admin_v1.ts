// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as adminModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.AdminClient', () => {
    it('has servicePath', () => {
        const servicePath = adminModule.v1.AdminClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = adminModule.v1.AdminClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = adminModule.v1.AdminClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new adminModule.v1.AdminClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new adminModule.v1.AdminClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new adminModule.v1.AdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.adminStub, undefined);
        await client.initialize();
        assert(client.adminStub);
    });

    it('has close method', () => {
        const client = new adminModule.v1.AdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new adminModule.v1.AdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new adminModule.v1.AdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getStatus', () => {
        it('invokes getStatus without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Status());
            client.innerApiCalls.getStatus = stubSimpleCall(expectedResponse);
            const [response] = await client.getStatus(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getStatus without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Status());
            client.innerApiCalls.getStatus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getStatus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IStatus|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getStatus with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.getStatus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getStatus(request), expectedError);
            assert((client.innerApiCalls.getStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getStorage', () => {
        it('invokes getStorage without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Storage());
            client.innerApiCalls.getStorage = stubSimpleCall(expectedResponse);
            const [response] = await client.getStorage(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStorage as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getStorage without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Storage());
            client.innerApiCalls.getStorage = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getStorage(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IStorage|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStorage as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getStorage with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.getStorage = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getStorage(request), expectedError);
            assert((client.innerApiCalls.getStorage as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getProject', () => {
        it('invokes getProject without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.GetProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.getProject = stubSimpleCall(expectedResponse);
            const [response] = await client.getProject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getProject without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.GetProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.getProject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getProject(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IProject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getProject with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.GetProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getProject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getProject(request), expectedError);
            assert((client.innerApiCalls.getProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createProject', () => {
        it('invokes createProject without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.CreateProjectRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.createProject = stubSimpleCall(expectedResponse);
            const [response] = await client.createProject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createProject without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.CreateProjectRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.createProject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createProject(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IProject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createProject with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.CreateProjectRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createProject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createProject(request), expectedError);
            assert((client.innerApiCalls.createProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateProject', () => {
        it('invokes updateProject without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.UpdateProjectRequest());
            request.project = {};
            request.project.name = '';
            const expectedHeaderRequestParams = "project.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.updateProject = stubSimpleCall(expectedResponse);
            const [response] = await client.updateProject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateProject without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.UpdateProjectRequest());
            request.project = {};
            request.project.name = '';
            const expectedHeaderRequestParams = "project.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project());
            client.innerApiCalls.updateProject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateProject(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IProject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateProject with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.UpdateProjectRequest());
            request.project = {};
            request.project.name = '';
            const expectedHeaderRequestParams = "project.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateProject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateProject(request), expectedError);
            assert((client.innerApiCalls.updateProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteProject', () => {
        it('invokes deleteProject without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.DeleteProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProject = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteProject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteProject without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.DeleteProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteProject(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteProject with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.DeleteProjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteProject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteProject(request), expectedError);
            assert((client.innerApiCalls.deleteProject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('migrateDatabase', () => {
        it('invokes migrateDatabase without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.MigrateDatabaseRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.migrateDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.migrateDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.migrateDatabase as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes migrateDatabase without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.MigrateDatabaseRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.migrateDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.migrateDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.migrateDatabase as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes migrateDatabase with call error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.MigrateDatabaseRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.migrateDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.migrateDatabase(request), expectedError);
            assert((client.innerApiCalls.migrateDatabase as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes migrateDatabase with LRO error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.MigrateDatabaseRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.migrateDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.migrateDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.migrateDatabase as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkMigrateDatabaseProgress without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkMigrateDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkMigrateDatabaseProgress with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkMigrateDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listProjects', () => {
        it('invokes listProjects without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
            ];
            client.innerApiCalls.listProjects = stubSimpleCall(expectedResponse);
            const [response] = await client.listProjects(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProjects without error using callback', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
            ];
            client.innerApiCalls.listProjects = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listProjects(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigeeregistry.v1.IProject[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listProjects with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listProjects = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listProjects(request), expectedError);
            assert((client.innerApiCalls.listProjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProjectsStream without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
            ];
            client.descriptors.page.listProjects.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listProjectsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigeeregistry.v1.Project[] = [];
                stream.on('data', (response: protos.google.cloud.apigeeregistry.v1.Project) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listProjects.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProjects, request));
        });

        it('invokes listProjectsStream with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listProjects.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listProjectsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigeeregistry.v1.Project[] = [];
                stream.on('data', (response: protos.google.cloud.apigeeregistry.v1.Project) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listProjects.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProjects, request));
        });

        it('uses async iteration with listProjects without error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
              generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.Project()),
            ];
            client.descriptors.page.listProjects.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.apigeeregistry.v1.IProject[] = [];
            const iterable = client.listProjectsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listProjects.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listProjects with error', async () => {
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigeeregistry.v1.ListProjectsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listProjects.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listProjectsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.apigeeregistry.v1.IProject[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listProjects.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('api', () => {
            const fakePath = "/rendered/path/api";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiPath', () => {
                const result = client.apiPath("projectValue", "locationValue", "apiValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiName', () => {
                const result = client.matchProjectFromApiName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApiName', () => {
                const result = client.matchLocationFromApiName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.apiPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiName', () => {
                const result = client.matchApiFromApiName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('apiDeployment', () => {
            const fakePath = "/rendered/path/apiDeployment";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                deployment: "deploymentValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiDeploymentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiDeploymentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiDeploymentPath', () => {
                const result = client.apiDeploymentPath("projectValue", "locationValue", "apiValue", "deploymentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiDeploymentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiDeploymentName', () => {
                const result = client.matchProjectFromApiDeploymentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApiDeploymentName', () => {
                const result = client.matchLocationFromApiDeploymentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.apiDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiDeploymentName', () => {
                const result = client.matchApiFromApiDeploymentName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeploymentFromApiDeploymentName', () => {
                const result = client.matchDeploymentFromApiDeploymentName(fakePath);
                assert.strictEqual(result, "deploymentValue");
                assert((client.pathTemplates.apiDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('apiSpec', () => {
            const fakePath = "/rendered/path/apiSpec";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                version: "versionValue",
                spec: "specValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiSpecPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiSpecPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiSpecPath', () => {
                const result = client.apiSpecPath("projectValue", "locationValue", "apiValue", "versionValue", "specValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiSpecPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiSpecName', () => {
                const result = client.matchProjectFromApiSpecName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApiSpecName', () => {
                const result = client.matchLocationFromApiSpecName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.apiSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiSpecName', () => {
                const result = client.matchApiFromApiSpecName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVersionFromApiSpecName', () => {
                const result = client.matchVersionFromApiSpecName(fakePath);
                assert.strictEqual(result, "versionValue");
                assert((client.pathTemplates.apiSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSpecFromApiSpecName', () => {
                const result = client.matchSpecFromApiSpecName(fakePath);
                assert.strictEqual(result, "specValue");
                assert((client.pathTemplates.apiSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('apiVersion', () => {
            const fakePath = "/rendered/path/apiVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                version: "versionValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiVersionPath', () => {
                const result = client.apiVersionPath("projectValue", "locationValue", "apiValue", "versionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiVersionName', () => {
                const result = client.matchProjectFromApiVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromApiVersionName', () => {
                const result = client.matchLocationFromApiVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.apiVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiVersionName', () => {
                const result = client.matchApiFromApiVersionName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVersionFromApiVersionName', () => {
                const result = client.matchVersionFromApiVersionName(fakePath);
                assert.strictEqual(result, "versionValue");
                assert((client.pathTemplates.apiVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationApiArtifact', () => {
            const fakePath = "/rendered/path/projectLocationApiArtifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                artifact: "artifactValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationApiArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationApiArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationApiArtifactPath', () => {
                const result = client.projectLocationApiArtifactPath("projectValue", "locationValue", "apiValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationApiArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationApiArtifactName', () => {
                const result = client.matchProjectFromProjectLocationApiArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationApiArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationApiArtifactName', () => {
                const result = client.matchLocationFromProjectLocationApiArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationApiArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromProjectLocationApiArtifactName', () => {
                const result = client.matchApiFromProjectLocationApiArtifactName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.projectLocationApiArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromProjectLocationApiArtifactName', () => {
                const result = client.matchArtifactFromProjectLocationApiArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.projectLocationApiArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationApiDeploymentArtifact', () => {
            const fakePath = "/rendered/path/projectLocationApiDeploymentArtifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                deployment: "deploymentValue",
                artifact: "artifactValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationApiDeploymentArtifactPath', () => {
                const result = client.projectLocationApiDeploymentArtifactPath("projectValue", "locationValue", "apiValue", "deploymentValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationApiDeploymentArtifactName', () => {
                const result = client.matchProjectFromProjectLocationApiDeploymentArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationApiDeploymentArtifactName', () => {
                const result = client.matchLocationFromProjectLocationApiDeploymentArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromProjectLocationApiDeploymentArtifactName', () => {
                const result = client.matchApiFromProjectLocationApiDeploymentArtifactName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeploymentFromProjectLocationApiDeploymentArtifactName', () => {
                const result = client.matchDeploymentFromProjectLocationApiDeploymentArtifactName(fakePath);
                assert.strictEqual(result, "deploymentValue");
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromProjectLocationApiDeploymentArtifactName', () => {
                const result = client.matchArtifactFromProjectLocationApiDeploymentArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationApiVersionArtifact', () => {
            const fakePath = "/rendered/path/projectLocationApiVersionArtifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                version: "versionValue",
                artifact: "artifactValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationApiVersionArtifactPath', () => {
                const result = client.projectLocationApiVersionArtifactPath("projectValue", "locationValue", "apiValue", "versionValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationApiVersionArtifactName', () => {
                const result = client.matchProjectFromProjectLocationApiVersionArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationApiVersionArtifactName', () => {
                const result = client.matchLocationFromProjectLocationApiVersionArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromProjectLocationApiVersionArtifactName', () => {
                const result = client.matchApiFromProjectLocationApiVersionArtifactName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVersionFromProjectLocationApiVersionArtifactName', () => {
                const result = client.matchVersionFromProjectLocationApiVersionArtifactName(fakePath);
                assert.strictEqual(result, "versionValue");
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromProjectLocationApiVersionArtifactName', () => {
                const result = client.matchArtifactFromProjectLocationApiVersionArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationApiVersionSpecArtifact', () => {
            const fakePath = "/rendered/path/projectLocationApiVersionSpecArtifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                api: "apiValue",
                version: "versionValue",
                spec: "specValue",
                artifact: "artifactValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationApiVersionSpecArtifactPath', () => {
                const result = client.projectLocationApiVersionSpecArtifactPath("projectValue", "locationValue", "apiValue", "versionValue", "specValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchProjectFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchLocationFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchApiFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVersionFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchVersionFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "versionValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSpecFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchSpecFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "specValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromProjectLocationApiVersionSpecArtifactName', () => {
                const result = client.matchArtifactFromProjectLocationApiVersionSpecArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationArtifact', () => {
            const fakePath = "/rendered/path/projectLocationArtifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                artifact: "artifactValue",
            };
            const client = new adminModule.v1.AdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationArtifactPath', () => {
                const result = client.projectLocationArtifactPath("projectValue", "locationValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationArtifactName', () => {
                const result = client.matchProjectFromProjectLocationArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationArtifactName', () => {
                const result = client.matchLocationFromProjectLocationArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromProjectLocationArtifactName', () => {
                const result = client.matchArtifactFromProjectLocationArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.projectLocationArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
