// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './admin_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  The Admin service supports setup and operation of an API registry.
 *  It is typically not included in hosted versions of the API.
 * @class
 * @memberof v1
 */
export class AdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  adminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AdminClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof AdminClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the AdminClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof AdminClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      apiPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}'
      ),
      apiDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}'
      ),
      apiSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}'
      ),
      apiVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationApiArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/artifacts/{artifact}'
      ),
      projectLocationApiDeploymentArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}/artifacts/{artifact}'
      ),
      projectLocationApiVersionArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/artifacts/{artifact}'
      ),
      projectLocationApiVersionSpecArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}/artifacts/{artifact}'
      ),
      projectLocationArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/artifacts/{artifact}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listProjects:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'projects')
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback ?
      this._gaxModule.protobuf.Root.fromJSON(
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json")) :
      this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const migrateDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.apigeeregistry.v1.MigrateDatabaseResponse') as gax.protobuf.Type;
    const migrateDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigeeregistry.v1.MigrateDatabaseMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      migrateDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        migrateDatabaseResponse.decode.bind(migrateDatabaseResponse),
        migrateDatabaseMetadata.decode.bind(migrateDatabaseMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.apigeeregistry.v1.Admin', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.adminStub) {
      return this.adminStub;
    }

    // Put together the "service stub" for
    // google.cloud.apigeeregistry.v1.Admin.
    this.adminStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.apigeeregistry.v1.Admin') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.apigeeregistry.v1.Admin,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const adminStubMethods =
        ['getStatus', 'getStorage', 'migrateDatabase', 'listProjects', 'getProject', 'createProject', 'updateProject', 'deleteProject'];
    for (const methodName of adminStubMethods) {
      const callPromise = this.adminStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.adminStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'apigeeregistry.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'apigeeregistry.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getStatus(
      request: protos.google.protobuf.IEmpty,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IStatus,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  getStatus(
      request: protos.google.protobuf.IEmpty,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IStatus,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  getStatus(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IStatus,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
/**
 * GetStatus returns the status of the service.
 * (-- api-linter: core::0131::request-message-name=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 * (-- api-linter: core::0131::method-signature=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 * (-- api-linter: core::0131::http-uri-name=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Status]{@link google.cloud.apigeeregistry.v1.Status}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getStatus(
      request: protos.google.protobuf.IEmpty,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IStatus,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IStatus,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IStatus,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getStatus(request, options, callback);
  }
  getStorage(
      request: protos.google.protobuf.IEmpty,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IStorage,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  getStorage(
      request: protos.google.protobuf.IEmpty,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IStorage,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  getStorage(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IStorage,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
/**
 * GetStorage returns information about the storage used by the service.
 * (-- api-linter: core::0131::request-message-name=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 * (-- api-linter: core::0131::method-signature=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 * (-- api-linter: core::0131::http-uri-name=disabled
 *     aip.dev/not-precedent: Not in the official API. --)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Storage]{@link google.cloud.apigeeregistry.v1.Storage}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getStorage(
      request: protos.google.protobuf.IEmpty,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IStorage,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IStorage,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IStorage,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getStorage(request, options, callback);
  }
  getProject(
      request: protos.google.cloud.apigeeregistry.v1.IGetProjectRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|undefined, {}|undefined
      ]>;
  getProject(
      request: protos.google.cloud.apigeeregistry.v1.IGetProjectRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|null|undefined,
          {}|null|undefined>): void;
  getProject(
      request: protos.google.cloud.apigeeregistry.v1.IGetProjectRequest,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * GetProject returns a specified project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the project to retrieve.
 *   Format: projects/*
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Project]{@link google.cloud.apigeeregistry.v1.Project}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getProject(
      request: protos.google.cloud.apigeeregistry.v1.IGetProjectRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.IGetProjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getProject(request, options, callback);
  }
  createProject(
      request: protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|undefined, {}|undefined
      ]>;
  createProject(
      request: protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|null|undefined,
          {}|null|undefined>): void;
  createProject(
      request: protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * CreateProject creates a specified project.
 * (-- api-linter: standard-methods=disabled --)
 * (-- api-linter: core::0133::http-uri-parent=disabled
 *     aip.dev/not-precedent: Project has an implicit parent. --)
 * (-- api-linter: core::0133::method-signature=disabled
 *     aip.dev/not-precedent: Project has an implicit parent. --)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.apigeeregistry.v1.Project} request.project
 *   The project to create.
 * @param {string} request.projectId
 *   The ID to use for the project, which will become the final component of
 *   the project's resource name.
 *
 *   This value should be at most 80 characters, and valid characters
 *   are /{@link 0-9|a-z}-./.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Project]{@link google.cloud.apigeeregistry.v1.Project}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createProject(
      request: protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.ICreateProjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createProject(request, options, callback);
  }
  updateProject(
      request: protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|undefined, {}|undefined
      ]>;
  updateProject(
      request: protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|null|undefined,
          {}|null|undefined>): void;
  updateProject(
      request: protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest,
      callback: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * UpdateProject can be used to modify a specified project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.apigeeregistry.v1.Project} request.project
 *   The project to update.
 *
 *   The `name` field is used to identify the project to update.
 *   Format: projects/*
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated. If omitted, all fields are updated that
 *   are set in the request message (fields set to default values are ignored).
 *   If a "*" is specified, all fields are updated, including fields that are
 *   unspecified/default in the request.
 * @param {boolean} request.allowMissing
 *   If set to true, and the project is not found, a new project will be created.
 *   In this situation, `update_mask` is ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Project]{@link google.cloud.apigeeregistry.v1.Project}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateProject(
      request: protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.apigeeregistry.v1.IProject,
          protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject,
        protos.google.cloud.apigeeregistry.v1.IUpdateProjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project.name': request.project!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateProject(request, options, callback);
  }
  deleteProject(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|undefined, {}|undefined
      ]>;
  deleteProject(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteProject(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * DeleteProject removes a specified project and all of the resources that it
 * owns.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the project to delete.
 *   Format: projects/*
 * @param {boolean} request.force
 *   If set to true, any child resources will also be deleted.
 *   (Otherwise, the request will only work if there are no child resources.)
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteProject(
      request: protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigeeregistry.v1.IDeleteProjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteProject(request, options, callback);
  }

  migrateDatabase(
      request: protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  migrateDatabase(
      request: protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  migrateDatabase(
      request: protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * MigrateDatabase attempts to migrate the database to the current schema.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.kind
 *   A string describing the kind of migration to perform.
 *   Currently only "auto" is recognized (and is the default if omitted).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  migrateDatabase(
      request: protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.IMigrateDatabaseMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.migrateDatabase(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by the migrateDatabase() method.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *
 * @example:
 *   const decodedOperation = await checkMigrateDatabaseProgress(name);
 *   console.log(decodedOperation.result);
 *   console.log(decodedOperation.done);
 *   console.log(decodedOperation.metadata);
 *
 */
  async checkMigrateDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.apigeeregistry.v1.MigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.MigrateDatabaseMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.migrateDatabase, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.apigeeregistry.v1.MigrateDatabaseResponse, protos.google.cloud.apigeeregistry.v1.MigrateDatabaseMetadata>;
  }
  listProjects(
      request: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject[],
        protos.google.cloud.apigeeregistry.v1.IListProjectsRequest|null,
        protos.google.cloud.apigeeregistry.v1.IListProjectsResponse
      ]>;
  listProjects(
      request: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
          protos.google.cloud.apigeeregistry.v1.IListProjectsResponse|null|undefined,
          protos.google.cloud.apigeeregistry.v1.IProject>): void;
  listProjects(
      request: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      callback: PaginationCallback<
          protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
          protos.google.cloud.apigeeregistry.v1.IListProjectsResponse|null|undefined,
          protos.google.cloud.apigeeregistry.v1.IProject>): void;
/**
 * ListProjects returns matching projects.
 * (-- api-linter: standard-methods=disabled --)
 * (-- api-linter: core::0132::method-signature=disabled
 *     aip.dev/not-precedent: projects are top-level resources. --)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of projects to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 50 values will be returned.
 *   The maximum is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProjects` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListProjects` must match
 *   the call that provided the page token.
 * @param {string} request.filter
 *   An expression that can be used to filter the list. Filters use the Common
 *   Expression Language and can refer to all message fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Project]{@link google.cloud.apigeeregistry.v1.Project}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Project]{@link google.cloud.apigeeregistry.v1.Project} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListProjectsRequest]{@link google.cloud.apigeeregistry.v1.ListProjectsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListProjectsResponse]{@link google.cloud.apigeeregistry.v1.ListProjectsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listProjects(
      request: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
          protos.google.cloud.apigeeregistry.v1.IListProjectsResponse|null|undefined,
          protos.google.cloud.apigeeregistry.v1.IProject>,
      callback?: PaginationCallback<
          protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
          protos.google.cloud.apigeeregistry.v1.IListProjectsResponse|null|undefined,
          protos.google.cloud.apigeeregistry.v1.IProject>):
      Promise<[
        protos.google.cloud.apigeeregistry.v1.IProject[],
        protos.google.cloud.apigeeregistry.v1.IListProjectsRequest|null,
        protos.google.cloud.apigeeregistry.v1.IListProjectsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listProjects(request, options, callback);
  }

/**
 * Equivalent to {@link listProjects}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listProjects} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of projects to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 50 values will be returned.
 *   The maximum is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProjects` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListProjects` must match
 *   the call that provided the page token.
 * @param {string} request.filter
 *   An expression that can be used to filter the list. Filters use the Common
 *   Expression Language and can refer to all message fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Project]{@link google.cloud.apigeeregistry.v1.Project} on 'data' event.
 */
  listProjectsStream(
      request?: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProjects.createStream(
      this.innerApiCalls.listProjects as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listProjects}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of projects to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 50 values will be returned.
 *   The maximum is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProjects` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListProjects` must match
 *   the call that provided the page token.
 * @param {string} request.filter
 *   An expression that can be used to filter the list. Filters use the Common
 *   Expression Language and can refer to all message fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listProjectsAsync(
      request?: protos.google.cloud.apigeeregistry.v1.IListProjectsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.cloud.apigeeregistry.v1.IProject>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProjects.asyncIterate(
      this.innerApiCalls['listProjects'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.apigeeregistry.v1.IProject>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified api resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @returns {string} Resource name string.
   */
  apiPath(project:string,location:string,api:string) {
    return this.pathTemplates.apiPathTemplate.render({
      project: project,
      location: location,
      api: api,
    });
  }

  /**
   * Parse the project from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).project;
  }

  /**
   * Parse the location from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).location;
  }

  /**
   * Parse the api from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).api;
  }

  /**
   * Return a fully-qualified apiDeployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  apiDeploymentPath(project:string,location:string,api:string,deployment:string) {
    return this.pathTemplates.apiDeploymentPathTemplate.render({
      project: project,
      location: location,
      api: api,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).project;
  }

  /**
   * Parse the location from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).location;
  }

  /**
   * Parse the api from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).api;
  }

  /**
   * Parse the deployment from ApiDeployment resource.
   *
   * @param {string} apiDeploymentName
   *   A fully-qualified path representing ApiDeployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromApiDeploymentName(apiDeploymentName: string) {
    return this.pathTemplates.apiDeploymentPathTemplate.match(apiDeploymentName).deployment;
  }

  /**
   * Return a fully-qualified apiSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} spec
   * @returns {string} Resource name string.
   */
  apiSpecPath(project:string,location:string,api:string,version:string,spec:string) {
    return this.pathTemplates.apiSpecPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      spec: spec,
    });
  }

  /**
   * Parse the project from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).project;
  }

  /**
   * Parse the location from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).location;
  }

  /**
   * Parse the api from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).api;
  }

  /**
   * Parse the version from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).version;
  }

  /**
   * Parse the spec from ApiSpec resource.
   *
   * @param {string} apiSpecName
   *   A fully-qualified path representing ApiSpec resource.
   * @returns {string} A string representing the spec.
   */
  matchSpecFromApiSpecName(apiSpecName: string) {
    return this.pathTemplates.apiSpecPathTemplate.match(apiSpecName).spec;
  }

  /**
   * Return a fully-qualified apiVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @returns {string} Resource name string.
   */
  apiVersionPath(project:string,location:string,api:string,version:string) {
    return this.pathTemplates.apiVersionPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
    });
  }

  /**
   * Parse the project from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).project;
  }

  /**
   * Parse the location from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).location;
  }

  /**
   * Parse the api from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).api;
  }

  /**
   * Parse the version from ApiVersion resource.
   *
   * @param {string} apiVersionName
   *   A fully-qualified path representing ApiVersion resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromApiVersionName(apiVersionName: string) {
    return this.pathTemplates.apiVersionPathTemplate.match(apiVersionName).version;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationApiArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiArtifactPath(project:string,location:string,api:string,artifact:string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).api;
  }

  /**
   * Parse the artifact from ProjectLocationApiArtifact resource.
   *
   * @param {string} projectLocationApiArtifactName
   *   A fully-qualified path representing project_location_api_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiArtifactName(projectLocationApiArtifactName: string) {
    return this.pathTemplates.projectLocationApiArtifactPathTemplate.match(projectLocationApiArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiDeploymentArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} deployment
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiDeploymentArtifactPath(project:string,location:string,api:string,deployment:string,artifact:string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      deployment: deployment,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).api;
  }

  /**
   * Parse the deployment from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).deployment;
  }

  /**
   * Parse the artifact from ProjectLocationApiDeploymentArtifact resource.
   *
   * @param {string} projectLocationApiDeploymentArtifactName
   *   A fully-qualified path representing project_location_api_deployment_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiDeploymentArtifactName(projectLocationApiDeploymentArtifactName: string) {
    return this.pathTemplates.projectLocationApiDeploymentArtifactPathTemplate.match(projectLocationApiDeploymentArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiVersionArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiVersionArtifactPath(project:string,location:string,api:string,version:string,artifact:string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).api;
  }

  /**
   * Parse the version from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).version;
  }

  /**
   * Parse the artifact from ProjectLocationApiVersionArtifact resource.
   *
   * @param {string} projectLocationApiVersionArtifactName
   *   A fully-qualified path representing project_location_api_version_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiVersionArtifactName(projectLocationApiVersionArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionArtifactPathTemplate.match(projectLocationApiVersionArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationApiVersionSpecArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} spec
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationApiVersionSpecArtifactPath(project:string,location:string,api:string,version:string,spec:string,artifact:string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      spec: spec,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).location;
  }

  /**
   * Parse the api from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).api;
  }

  /**
   * Parse the version from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).version;
  }

  /**
   * Parse the spec from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the spec.
   */
  matchSpecFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).spec;
  }

  /**
   * Parse the artifact from ProjectLocationApiVersionSpecArtifact resource.
   *
   * @param {string} projectLocationApiVersionSpecArtifactName
   *   A fully-qualified path representing project_location_api_version_spec_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationApiVersionSpecArtifactName(projectLocationApiVersionSpecArtifactName: string) {
    return this.pathTemplates.projectLocationApiVersionSpecArtifactPathTemplate.match(projectLocationApiVersionSpecArtifactName).artifact;
  }

  /**
   * Return a fully-qualified projectLocationArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  projectLocationArtifactPath(project:string,location:string,artifact:string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.render({
      project: project,
      location: location,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).project;
  }

  /**
   * Parse the location from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).location;
  }

  /**
   * Parse the artifact from ProjectLocationArtifact resource.
   *
   * @param {string} projectLocationArtifactName
   *   A fully-qualified path representing project_location_artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromProjectLocationArtifactName(projectLocationArtifactName: string) {
    return this.pathTemplates.projectLocationArtifactPathTemplate.match(projectLocationArtifactName).artifact;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.adminStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
